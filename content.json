{"pages":[{"title":"LIIHAG","date":"2018-11-16T02:08:44.000Z","path":"home/index.html","text":"由于本人采用为知笔记来管理知识，因此博客会较少更新"},{"title":"","date":"2018-11-16T02:08:44.000Z","path":"about/index.html","text":"此博客由HEXO构建，采用的是Wikitten主题"}],"posts":[{"title":"关于ss的文章读后感","date":"2019-02-26T12:07:44.000Z","path":"wiki/杂谈/关于ss/","text":"为何写下此文​ 14年接触至今的一个开源项目：ss，我只是一个使用者，也了解其中的众多的故事，甚至一度想拿此项目来牟利。今日google了一下，发现一篇文章，此作者与我一样是一个较早接触此项目的人，阅此文后感想颇多。便记录下此时的心情。 中国IT圈的现状门槛低​ 14年时，知道ss的人并不是很多，我也是从一位义愤填膺的网友口中得知此项目，彼时惊讶于此项目作者的才能，那个时候了解tcp握手的大概流程，而此作者却已经用于实战，也第一次知道github上真的有开源的优秀国人的作品，也第一次能大量阅读国人在github上的讨论。 ​ 自以为进入了一个由优秀码农组成的一个小圈子。还傻乎乎跟人家一起讨论如何破解锐速，如何制作一件锐速破解包。 ​ 然而生活总是忙碌的，慢慢的淡忘了此事，我最后都没有跟ss的作者聊过。 ​ 直到有一次看到ss的项目显示被移除了，细看才知道是master分支被移除，而还是有一个dev分支的。看了被移除的声明，知道此事被政府所参与了。 ​ 我很震惊，这事虽然违法，可是一小群IT爱好者如何就能引起政府的关注？进一步了解，发现百度已经屏蔽ss的搜索。 ​ 具体时间我忘记了，我开始反思，各种搜索，发现ss的门槛真的很低了。甚至已经有人开始贩卖ss账号了。我在那时也起了贩卖ss账号的想法。 ​ 网上看到一个高中生，甚至一个喜欢专研的人，居然就可以安装ss并贩卖账号牟利。而那时的我第一想到的就是我也可以贩卖这些账号牟利，此时我手里还知道如何来大量套取亚马逊云的免费一年账号来提供服务器，心想这是可以空手套白狼一本万利的生意。于是我又在github上搜索修改了一套简单的账号数据库框架。准备贩卖账号。可后来又由于工作和生活，一直没精力来处理这些。作罢。 ​ 现在回头想想，那时的我不也是一个投机分子么？对于此项目我掌握的并不多，却想着利用一些信息差来赚取利益，有些可笑。或许我就是众多IT圈人的一个写照：能力不足，自以为是，投机倒把。 基数大​ 门槛低就意味着IT圈人很多，后面发现到处充斥着中国码农，很多初高中生都有github账号了，他们的谈论有的虽然偏激，但也能看出他们懂得不少。 ​ 我无法表达这对我思想上的冲击。但毫无疑问我的自信是受了严重打击的。我甚至怀疑我工作上的那些技能，一个普通网民通过百度是不是就能完全掌握。 ​ 如此大量的网民中，我不过是沧海一粟。只不过我还要靠着这点知识养家，而或许人家只是在课余玩玩这些只是而已。 人外有人​ 后来在github上又看了一些其他项目，包括阿里巴巴的macaca，发现原来那些大机构的作品也不过如此。而又看了一个96年的大学生的一个作品，发现此人至少深度掌握了java js shell linux等多方面的技术，而且是精通。目前他的项目与ss一样，被大量的投机者关注着，这其中包括我。 ​ 原来，大公司的作品不一定优秀，年轻者不一定懂得就少，不考虑收入，IT这个领域是很公平的。人外有人不一定是指有我们未成见过的更优秀的人，而是指，我们看不尽这世界的人。 不要倚老卖老，也不要妄自菲薄，能有一份养家的收入，也是不错的。 不要有35岁门槛的杞人忧天，也不要羡慕别人无忧无虑，就这样持续持续积累，其他随缘吧。 最后附上那片文章中的几句有意思的句子： 与人斗，其乐无穷。人生永远追逐着幻光，但谁把幻光看作幻光，谁便沉入无边的苦海！","tags":[{"name":"ss","slug":"ss","permalink":"/tags/ss/"},{"name":"杂谈","slug":"杂谈","permalink":"/tags/杂谈/"}],"categories":[{"name":"杂谈","slug":"杂谈","permalink":"/categories/杂谈/"}]},{"title":"RK3399 Android 音频驱动总结","date":"2019-02-25T12:07:44.000Z","path":"wiki/Android/驱动/Rk3399 Android音频驱动总结/","text":"整体音频驱动框架音频硬件设备驱动，由三大部分组成，分别是 Machine、Platform、Code snd_card： snd_card可以说是整个ALSA音频驱动最顶层的一个结构，整个声卡的软件逻辑结构开始于该结构，几乎所有与声音相关的逻辑设备都是在snd_card的管理之下，声卡驱动的第一个动作通常就是创建一个snd_card结构体。 Machine驱动中通常会注册snd_card。Machine中会绑定Platform和codec Platform驱动通常对应的是CPU端的I2S操作。 Codec驱动通常对应的是单独的codec，Codec驱动与平台无关。 一次音频设置的大体流程为： 设置machine–》machine分别设置Platform和Codec Dai的概念：Platform驱动和Codec驱动，通常通过Dai Driver来和Machine通信。 Machine驱动一般来说Machine对应的是一个linux platform 设备。 Machine驱动中会初始化一个snd_card结构体，snd_card结构体中有个关键的snd_soc_dai_link。snd_soc_dai_link就是用来绑定codec和Platform使用的。 在初始化snd_card后，Machine会通过snd_soc_register_card来注册一个声卡设备（snd_card）。 Platform驱动Platform驱动通常对应CPU端的I2S或其他音频格式接口。也就是用来设置CPU内部操作的，可能会涉及到相关的dma操作。 snd_soc_dai_driver： 123456789101112131415161718192021222324252627282930struct snd_soc_dai_driver &#123; /* DAI description */ const char *name;//ALOS就是通过这name来绑定machine中的dailink， unsigned int id; unsigned int base; /* DAI driver callbacks */ int (*probe)(struct snd_soc_dai *dai);//初次绑定dai时执行的操作 int (*remove)(struct snd_soc_dai *dai); int (*suspend)(struct snd_soc_dai *dai); int (*resume)(struct snd_soc_dai *dai); /* compress dai */ int (*compress_new)(struct snd_soc_pcm_runtime *rtd, int num); /* DAI is also used for the control bus */ bool bus_control; /* ops */ const struct snd_soc_dai_ops *ops;//实际上主要的相关操作：设置时钟，波特率等 /* DAI capabilities */ struct snd_soc_pcm_stream capture;//实际的capture流的能力，如果不设此值，表示没有capture的pcm节点 struct snd_soc_pcm_stream playback//实际的palyback流的能力，如果不设此值，表示没有capture的pcm节点 unsigned int symmetric_rates:1; unsigned int symmetric_channels:1; unsigned int symmetric_samplebits:1; /* probe ordering - for components with runtime dependencies */ int probe_order; int remove_order;&#125;; machine 通过snd_soc_add_platform来注册snd_soc_dai_driver CODEC驱动codec驱动同样需要实例化上面说的snd_soc_dai_driver来与machine联系，同时还要注册一个snd_soc_codec_driver驱动来实现codec自身的相关操作。 snd_soc_dai_driver和snd_soc_codec_driver通过snd_soc_register_codec来注册绑定。 RK3399的音频驱动Machine驱动：simple_cardRk3399比较推荐使用simple card来充当machine的角色。对应驱动文件路径：\\sound\\soc\\generic\\simple-card.c。 simple-card的相关dts配置可以参考内核文档，需要注意的是： 1.在CPU或codec的子节点中，如果指定了clock设备，那么该在子节点被启动或停用时此clock会自动被使能或失能。无需额外操作。这个clock通常是用于给外设提供mclk，所以通常挂载codec的节点下。 2.默认是CPU为I2S主设备，除非指定了bitclock-master和frame-master 3.默认只有一个dailink，如果只有一个dailink，则需要在每个属性或节点前添加simple-audio-card,前缀。多个dailink则不能添加 4.simple card同样支持tdm格式 Platform驱动： rockchip_i2s实际上在rockchip i2s驱动中，是通过devm_snd_soc_register_component封装的snd_soc_add_platform 此外，还通过devm_snd_dmaengine_pcm_register注册了一个dma的驱动 Codec 驱动：dummy_codecdummy_codec为一个基础的codec代码，我在此基础上修改从而实现了讯飞模块和ti模块的纯数字I2S音频输入输出的驱动。 I2S相关知识I2S有3个主要信号： SCLK（BCLK）：串行时钟，也叫位时钟（BCLK），即对应数字音频的每一位数据，SCLK都有1个脉冲。** LRCK：帧时钟，用于切换左右声道的数据。LRCK的频率=采样频率。通常有8K/16K/32K /44.1K等采样率 SDATA：串行数据，就是用二进制补码表示的音频数据 MCLK：主时钟，也叫系统时钟（Sys Clock）。为了使系统间能够更好地同步，MCLK的频率与LRCK存在一个倍数关系。某些模块实际上不需要输入MCLK，讯飞模块就不需要 通常情况下： ​ SCLK的频率=2×采样频率×采样位数 根据SDATA数据相对于LRCK和SCLK的位置不同，I2S格式分为： 左对齐（较少使用） I2S格式（即飞利浦规定的格式） 右对齐（也叫日本格式、普通格式）。","tags":[{"name":"rk3399","slug":"rk3399","permalink":"/tags/rk3399/"},{"name":"音频驱动","slug":"音频驱动","permalink":"/tags/音频驱动/"}],"categories":[{"name":"Android","slug":"Android","permalink":"/categories/Android/"},{"name":"驱动","slug":"Android/驱动","permalink":"/categories/Android/驱动/"}]},{"title":"LIIHAG","date":"2018-11-16T02:08:44.000Z","path":"wiki/首页/","text":"由于本人采用为知笔记来管理知识，因此博客会较少更新","tags":[],"categories":[]},{"title":"hexo相关常用操作","date":"2018-11-16T02:08:44.000Z","path":"wiki/备忘/hexo相关常用操作/","text":"常用操作hexo 生成页面1hexo g 启动hexo本地服务器1hexo s 部署1hexo d 实际上不需要使用hexo其他指令来写文章，每次直接在source/_posts目录下新建md文档，然后直接hexo g 生成hexo d部署即可。这种方式需要手动修改tags和categories。 相关概念1.在我采用的这个主题中，categories需要理解为导航。 2.网页上面的菜单栏（主页、关于），对应的是config.yml中的menu。实际上点击主页会显示所有主页目录下的所有文章，而我故意将主页目录下只放一个index.md，所以看上去主页就是一个页面。 3.关于首页，网页首页的配置在主题的config.yml中 1default_index_file: 首页.md # if this, it will display at site index instead of default index page 需要注意的是，这里的首页和导航栏上面的首页不一样。但我部署时会故意将这个和导航栏的那个首页同步。这样的显示更友好 4.一篇文章可以有多个tag，如下此文章就可以同时有两个tag了： 123tags：- hexo- blog 5.注意categories是分层级的，如下实际的显示是在导航栏里分了两层。 123categories: - 2019- 01 6.每篇文章的头部配置中，toc: true 就会出现一个全局的目录 相关链接1.hexo-theme-Wikitten 主题 2.hexo官方文档","tags":[{"name":"hexo","slug":"hexo","permalink":"/tags/hexo/"}],"categories":[{"name":"备忘","slug":"备忘","permalink":"/categories/备忘/"}]}]}